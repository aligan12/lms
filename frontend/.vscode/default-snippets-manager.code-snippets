{
	"thunk": {
		"prefix": "thunk",
		"description": "thunk",
		"scope": "typescript",
		"body": [
			"import { createAsyncThunk } from '@reduxjs/toolkit'\r",
			"import axios from 'axios'\r",
			"\r",
			"\r",
			"import { IThunkExtraArg } from 'app/providers/StoreProvider'\r",
			"\r",
			"import { ICreateRegistrationData } from 'entities/Authorization/types'\r",
			"import { ICustomUser } from 'entities/Users/CustomUser'\r",
			"\r",
			"export const ${TM_FILENAME_BASE} = createAsyncThunk<\r",
			"\toutput,\r",
			"\tinput,\r",
			"\t{ rejectValue: string; extra: IThunkExtraArg }\r",
			">('${TM_FILENAME_BASE}', async (inputData, { extra, rejectWithValue, dispatch }) => {\r",
			"\ttry {\r",
			"\t\tconst response = await extra.$axios.post<output>(extra.API.auth.users.create, inputData)\r",
			"\t\treturn response.data\r",
			"\t} catch (error: any) {\r",
			"\t\treturn rejectWithValue(extra.serverErrors(error))\r",
			"\t}\r",
			"})\r",
			"\r",
			""
		]
	},
	"slice": {
		"prefix": "slice",
		"description": "slice",
		"scope": "typescript",
		"body": [
			"import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\r",
			"import { I${TM_FILENAME_BASE}Schema } from \"../types/${TM_FILENAME_BASE}Schema.type\";\r",
			"\r",
			"const initialState: I${TM_FILENAME_BASE}Schema = {\r",
			" \r",
			"};\r",
			"\r",
			"export const ${TM_FILENAME_BASE} = createSlice({\r",
			"  name: ${TM_FILENAME_BASE},\r",
			"  initialState: initialState,\r",
			"  reducers: {\r",
			"    reducerName: (state: I${TM_FILENAME_BASE}Schema, { payload }: PayloadAction<>) => {\r",
			"\t\t\tstate.name = payload\r",
			"\t\t},\r",
			"  },\r",
			"  extraReducers: (builder) => {\r",
			"    builder\r",
			"      .addCase(, (state: I${TM_FILENAME_BASE}Schema, action) => {\r",
			"        state.error = undefined;\r",
			"        state.isLoading = true;\r",
			"      })\r",
			"      .addCase(, (state: I${TM_FILENAME_BASE}Schema, action) => {\r",
			"        state.isLoading = false;\r",
			"      })\r",
			"      .addCase(, (state: I${TM_FILENAME_BASE}Schema, action) => {\r",
			"        state.error = action.payload;\r",
			"        state.isLoading = false;\r",
			"      });\r",
			"  },\r",
			"});\r",
			"\r",
			"export const { actions: ${TM_FILENAME_BASE}Actions } = ${TM_FILENAME_BASE};\r",
			"export const { reducer: ${TM_FILENAME_BASE}Reducer } = ${TM_FILENAME_BASE};\r",
			""
		]
	},
	"story": {
		"prefix": "story",
		"description": "story",
		"scope": "typescriptreact",
		"body": [
			"import type { Meta, StoryObj } from '@storybook/react'",
			"",
			"import { ${TM_FILENAME_BASE} } from './${TM_FILENAME}'",
			"",
			"import { ETheme } from 'app/providers/ThemeProvider/lib/ThemeContext'",
			"",
			"import { ThemeDecorator } from 'shared/config/StyleDecorator/ThemeDecorator'",
			"",
			"const meta: Meta<typeof ${TM_FILENAME_BASE}> = {",
			"\ttitle: 'Example/${TM_FILENAME_BASE}',",
			"\tcomponent: ${TM_FILENAME_BASE},",
			"\ttags: ['autodocs'],",
			"\targTypes: {},",
			"}",
			"",
			"export default meta",
			"",
			"type Story = StoryObj<typeof meta>",
			"",
			"export const Primary: Story = {",
			"\targs: {},",
			"\tdecorators: [ThemeDecorator(ETheme.LIGHT)],",
			"}",
			"",
			"export const Secondary: Story = {",
			"\targs: {},",
			"\tdecorators: [ThemeDecorator(ETheme.LIGHT)],",
			"}",
			"",
			"export const Large: Story = {",
			"\targs: {},",
			"\tdecorators: [ThemeDecorator(ETheme.LIGHT)],",
			"}",
			"",
			"export const Small: Story = {",
			"\targs: {},",
			"\tdecorators: [ThemeDecorator(ETheme.LIGHT)],",
			"}",
			""
		]
	},
	"test": {
		"prefix": "test",
		"description": "test",
		"scope": "typescriptreact",
		"body": [
			"import { render, screen } from '@testing-library/react'\r",
			"\r",
			"describe('${TM_FILENAME}', () => {\r",
			"\ttest('', () => {\r",
			"\t\trender(<${TM_FILENAME} />)\r",
			"\t\texpect(screen.getByTestId('TEST')).toBeInTheDocument()\r",
			"\t})\r",
			"})\r",
			""
		]
	},
	"rc": {
		"prefix": "rc",
		"description": "rc",
		"scope": "typescriptreact",
		"body": [
			"import classes from './${TM_FILENAME_BASE}.module.scss'\r",
			"\r",
			"import { classnames as cn } from 'shared/lib'\r",
			"\r",
			"\r",
			"export const ${TM_FILENAME_BASE} = ({styles}:I${TM_FILENAME_BASE}Props) => {\r",
			"\r",
			"  return (\r",
			"    <div className={cn(classes.${TM_FILENAME_BASE},[styles])}> \r",
			"      $1\r",
			"    </div>\r",
			"  )\r",
			"}\r",
			"\r",
			"interface I${TM_FILENAME_BASE}Props {\r",
			"  styles? : string\r",
			"}\r",
			""
		]
	}
}
